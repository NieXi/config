" CONFIG TAKEN FROM: /usr/share/vim/vim74/vimrc_example.vim

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
"else
"  set backup		" keep a backup file (restore to previous version)
  set undofile		" keep an undo file (undo changes after closing)
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


" SYNTAX HIGHLIGHTING:
"###################################
"#我的添加:-)
set t_Co=256
syntax enable
syntax on
"set background=dark
"colorscheme solarized

set bs=2
set nu
set shortmess=atI
"winpos 5 5
set ruler
set showcmd
set cursorline
set autowrite

" 定义快捷键的前缀，即<Leader>
let mapleader=";"
" 开启文件类型侦测
 filetype on
" 根据侦测到的不同类型加载对应的插件
 filetype plugin on
" 定义快捷键到行首和行尾
 nmap LB 0
 nmap LE $
" 设置快捷键将选中文本块复制至系统剪贴板
 vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
 nmap <Leader>p "+p
" 定义快捷键关闭当前分割窗口
 nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
 nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
 nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
 nmap <Leader>Q :qa!<CR>
" 依次遍历子窗口
 nnoremap nw <C-W><C-W>
" 跳转至右方的窗口
 nnoremap <Leader>lw <C-W>l
" 跳转至左方的窗口
 nnoremap <Leader>hw <C-W>h
" 跳转至上方的子窗口
 nnoremap <Leader>kw <C-W>k
" 跳转至下方的子窗口
 nnoremap <Leader>jw <C-W>j
" 定义快捷键在结对符之间跳转
 nmap <Leader>M %
" 让配置变更立即生效
if has("autocmd")
	    autocmd! bufwritepost vimrc source $MYVIMRC
    endif
" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
 set ignorecase
" 关闭兼容模式
 set nocompatible
" vim 自身命令行模式智能补全
 set wildmenu

"###################################
